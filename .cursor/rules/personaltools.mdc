---
description: 
globs: 
alwaysApply: true
---
# Make sure to always update this documentation when structure of functionality of the app changes

# Calendar Screenshot Analyzer - Project Documentation

## Project Overview
A Python web application that:
1. Connects to multiple calendar sources (Google Calendar, Microsoft Office 365, Apple Calendar on macOS, and Thunderbird Calendar)
2. Analyzes screenshots of conversations using Claude AI to extract meeting time suggestions
3. Intelligently identifies whether the text suggests time slots or requests availability
4. Checks calendar availability for detected time slots
5. Provides alternative time suggestions when no suitable slots are found
6. Allows copying of suitable meeting times to clipboard
7. Displays a weekly calendar view with all connected calendars' events

## Current Project Structure
calendar_screenshot_app/
├── app/
│ ├── init.py # Flask application factory
│ ├── main.py # Legacy entry point (run.py is now used)
│ ├── routes/
│ │ ├── init.py
│ │ ├── auth_routes.py # Google/Microsoft authentication
│ │ ├── calendar_routes.py # Calendar management routes
│ │ └── screenshot_routes.py # Screenshot upload/analysis routes
│ ├── services/
│ │ ├── init.py
│ │ ├── apple_calendar.py # Apple Calendar integration (macOS only)
│ │ ├── availability.py # Availability checking logic
│ │ ├── clipboard_monitor.py # Clipboard monitoring for screenshots
│ │ ├── claude_service.py # Anthropic Claude API integration for image analysis
│ │ ├── google_calendar.py # Google Calendar API integration
│ │ ├── microsoft_calendar.py # Microsoft Graph API integration
│ │ ├── thunderbird_calendar.py # Thunderbird Calendar integration (supports both cache.sqlite and local.sqlite)
│ │ └── screenshot_analyzer.py # OCR fallback for time extraction
│ ├── static/ # CSS, JS, and static assets
│ ├── templates/ # HTML templates
│ │ ├── analysis_results.html # Results display
│ │ ├── base.html # Base template with layout
│ │ ├── calendars.html # Calendar selection page
│ │ ├── dashboard.html # Main dashboard
│ │ ├── index.html # Landing page with weekly calendar view
│ │ ├── api_status.html # API status page
│ │ └── error.html # Error page
│ ├── utils/ # Utility functions
│ └── models/ # Data models
├── docs/ # Documentation
├── tests/ # Unit and integration tests
├── .env # Environment variables
├── .env.example # Example environment file
├── rules.md # Application architecture rules
├── README.md # Project documentation
├── requirements.txt # Python dependencies
├── run.py # Application entry point
├── calendar-screenshot.service # Systemd service file
├── install_debian_service.sh # Debian service installation script
├── CALENDAR_PERMISSIONS.md # Documentation for calendar access permissions
├── debug_calendar_access.py # Debug script for calendar access
├── fetch_calendars.py # Utility script to fetch calendars
└── fix_calendar_permissions.py # Utility to fix calendar permissions

## Technical Implementation

### Core Components

1. **Multi-Calendar Integration**
   - Google Calendar via Google API
   - Microsoft Calendar via Microsoft Graph API
   - Apple Calendar via AppleScript (macOS only)
   - Thunderbird Calendar via SQLite database (supports both cache.sqlite and local.sqlite formats)
   - Calendar selection and filtering interface
   - Weekly calendar view with color-coded events

2. **Claude-Powered Screenshot Analysis**
   - Direct integration with Anthropic's Claude API
   - Advanced prompt engineering for accurate time extraction
   - Detection of suggestion vs. request context
   - Time slot extraction with priority indicators
   - OCR fallback using Tesseract when Claude unavailable

3. **Availability Engine**
   - Cross-calendar availability checking
   - Conflict detection and resolution
   - Alternative time slot suggestions
   - Time zone handling

4. **User Interface**
   - Responsive Bootstrap-based design
   - Weekly calendar with color-coded events
   - Clipboard integration for quick analysis
   - Copy-to-clipboard functionality for time slots
   - Calendar status indicators
   - Modal-based screenshot upload
   - Debug tools for troubleshooting

### Key Features

- **Weekly Calendar View**: View all your events from different calendars in a single unified week view
- **Color-Coded Calendars**: Each calendar provider and individual calendar has its own color for easy identification
- **Claude AI Analysis**: Intelligent screenshot understanding using Claude's multimodal capabilities
- **Platform Integration**: 
  - Automatic Apple Calendar detection on macOS without authentication
  - Automatic Thunderbird Calendar detection on any platform without authentication
- **Enhanced Thunderbird Integration**: Support for both cache.sqlite and local.sqlite database formats
- **Multiple Calendar Sources**: Support for Google, Microsoft, Apple, and Thunderbird calendars
- **Clipboard Analysis**: Direct analysis from clipboard screenshots
- **Intelligent Time Detection**: Advanced pattern matching for various time formats
- **Availability Checking**: Cross-reference with all connected calendars
- **Alternative Suggestions**: Recommends available time slots when conflicts exist
- **Responsive UI**: Works on desktop and mobile devices
- **Quick Copy**: Copy time slots with a single click
- **Linux Service**: Automatic startup as systemd service on Debian/Ubuntu systems
- **Debug Functionality**: Built-in tools for debugging calendar integration issues

## Workflow

1. **Calendar View Workflow**:
   - User views current week's events across all connected calendars on the homepage
   - Events are color-coded by calendar source and individual calendar
   - User can navigate between weeks and switch between week/month views
   - User can click on events to see additional details

2. **Suggesting Times Workflow**:
   - User uploads screenshot of suggested meeting times
   - Claude analyzes and identifies that someone is suggesting times
   - App checks user's calendar availability for each suggested slot
   - User sees which suggestions work with their schedule
   - User can select and copy suitable times to clipboard

3. **Requesting Times Workflow**:
   - User uploads screenshot of someone requesting meeting times
   - Claude analyzes and identifies that someone is requesting times
   - App identifies free slots in the user's calendar around requested times
   - User selects from available options
   - App formats time suggestions for easy copying to clipboard

## Environment Setup

- **Authentication Credentials**: Google Client ID/Secret, Microsoft Client ID/Secret, Claude API Key
- **Flask Configuration**: Secret key, debug mode, port settings
- **Feature Flags**: Optional features can be enabled/disabled
- **Development Tools**: Python virtual environment, debug utilities
- **Systemd Service**: Debian/Ubuntu service configuration for automatic startup

## Technologies

- **Backend**: Python 3.8+, Flask
- **Frontend**: HTML5, CSS3, JavaScript, Bootstrap 5, FullCalendar.js
- **AI**: Anthropic Claude API for advanced screenshot analysis
- **APIs**: Google Calendar API, Microsoft Graph API
- **Local Integrations**: 
  - AppleScript for macOS Calendar
  - SQLite for Thunderbird Calendar (supporting both cache.sqlite and local.sqlite formats)
- **OCR Fallback**: Tesseract, OpenCV, Pillow
- **Authentication**: OAuth 2.0
- **Deployment**: 
  - Local development server with dotenv configuration
  - Systemd service for Linux deployment

## Debugging Features

- **Calendar Debug Endpoint**: `/calendar/debug` provides detailed information about available calendars and events
- **Debug Console**: Interactive console for viewing application logs and errors
- **Database Inspection**: Automatic detection and inspection of Thunderbird calendar databases
- **API Status Page**: View the status of connected calendar APIs
- **Calendar Integration Testing**: Utilities to test calendar access and fix permissions

